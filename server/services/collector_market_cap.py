#!/usr/bin/env python3

import os, sys, logging, psycopg2, pandas as pd
from datetime import datetime, timedelta
from pykrx import stock
from psycopg2.extras import execute_batch

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s - %(levelname)s - %(message)s",
                    handlers=[logging.StreamHandler(sys.stdout)])
logger = logging.getLogger(__name__)


def get_db():
    return psycopg2.connect(host=os.getenv("PGHOST", "localhost"),
                            database=os.getenv("PGDATABASE", "postgres"),
                            user=os.getenv("PGUSER", "postgres"),
                            password=os.getenv("PGPASSWORD", ""),
                            port=os.getenv("PGPORT", "5432"),
                            sslmode="require")


def get_latest_trading_day(start_date: datetime) -> datetime:
    """
    Í∞ÄÏû• ÏµúÏã†Ïùò ÏôÑÎ£åÎêú Í±∞ÎûòÏùºÏùÑ Î∞òÌôò
    - Ïò§ÌõÑ 4Ïãú Ïù¥Ï†Ñ: Ï†Ñ Í±∞ÎûòÏùº
    - Ïò§ÌõÑ 4Ïãú Ïù¥ÌõÑ: ÎãπÏùºÏù¥ Í±∞ÎûòÏùºÏù¥Î©¥ ÎãπÏùº, ÏïÑÎãàÎ©¥ Í∞ÄÏû• ÏµúÍ∑º Í±∞ÎûòÏùº
    """
    now = datetime.now()

    # ÏãúÍ∞Ñ Í∏∞Ï§Ä Í≤∞Ï†ï
    market_closed = now.hour >= 16  # Ïò§ÌõÑ 4Ïãú Ïù¥ÌõÑÎ©¥ Ïû• ÎßàÍ∞êÏúºÎ°ú Í∞ÑÏ£º

    logger.info(
        f"‚è∞ ÌòÑÏû¨ ÏãúÍ∞Ñ: {now.strftime('%Y-%m-%d %H:%M')}, Ïû• ÎßàÍ∞ê Ïó¨Î∂Ä: {market_closed}")

    # Í≤ÄÏÉâ ÏãúÏûëÏ†ê Í≤∞Ï†ï
    if market_closed:
        # Ïû• ÎßàÍ∞ê ÌõÑ: Ïò§ÎäòÎ∂ÄÌÑ∞ ÌôïÏù∏
        check_date = start_date
        logger.info("üìà Ïû• ÎßàÍ∞ê ÌõÑ - Ïò§Îäò Îç∞Ïù¥ÌÑ∞Î∂ÄÌÑ∞ ÌôïÏù∏")
    else:
        # Ïû• ÏãúÍ∞Ñ Ï§ë/Ïù¥Ï†Ñ: Ïñ¥Ï†úÎ∂ÄÌÑ∞ ÌôïÏù∏
        check_date = start_date - timedelta(days=1)
        logger.info("üìä Ïû• ÏãúÍ∞Ñ Ï§ë - Ï†Ñ Í±∞ÎûòÏùºÎ∂ÄÌÑ∞ ÌôïÏù∏")

    # ÏµúÎåÄ 15Ïùº Ï†ÑÍπåÏßÄ Í±∞ÎûòÏùº ÌÉêÏÉâ (Ìú¥Ïùº Ïó∞Ìú¥ Í≥†Î†§)
    for i in range(15):
        candidate_date = check_date - timedelta(days=i)
        date_str = candidate_date.strftime("%Y%m%d")

        try:
            logger.debug(f"üîç {date_str} Í±∞ÎûòÏùº Ïó¨Î∂Ä ÌôïÏù∏ Ï§ë...")

            # PyKRXÎ°ú Í±∞ÎûòÏùº Ïó¨Î∂Ä ÌôïÏù∏
            nearest_business_day = stock.get_nearest_business_day_in_a_week(
                date_str)

            if nearest_business_day == date_str:
                # Ìï¥Îãπ ÎÇ†ÏßúÍ∞Ä Í±∞ÎûòÏùºÏù∏ Í≤ΩÏö∞, Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
                try:
                    # ÎåÄÌëú Ï¢ÖÎ™©(ÏÇºÏÑ±Ï†ÑÏûê)ÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨ ÌôïÏù∏
                    test_df = stock.get_market_ohlcv(date_str, date_str,
                                                     "005930")

                    if not test_df.empty and len(test_df) > 0:
                        # Ïã§Ï†ú Í±∞Îûò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî Í≤ΩÏö∞
                        row = test_df.iloc[0]
                        if row["Ï¢ÖÍ∞Ä"] > 0 and row["Í±∞ÎûòÎüâ"] > 0:
                            logger.info(
                                f"‚úÖ ÏµúÏã† Í±∞ÎûòÏùº ÌôïÏ†ï: {candidate_date.strftime('%Y-%m-%d')} ({date_str})"
                            )
                            return candidate_date
                        else:
                            logger.debug(
                                f"‚ö†Ô∏è {date_str} - Îç∞Ïù¥ÌÑ∞Í∞Ä Î∂àÏôÑÏ†ÑÌï® (Ï¢ÖÍ∞Ä: {row['Ï¢ÖÍ∞Ä']}, Í±∞ÎûòÎüâ: {row['Í±∞ÎûòÎüâ']})"
                            )
                    else:
                        logger.debug(f"‚ö†Ô∏è {date_str} - Í±∞Îûò Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå")

                except Exception as data_error:
                    logger.debug(f"‚ö†Ô∏è {date_str} - Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®: {data_error}")

            else:
                logger.debug(
                    f"üìÖ {date_str} - ÎπÑÍ±∞ÎûòÏùº (ÏµúÍ∑º Í±∞ÎûòÏùº: {nearest_business_day})")

        except Exception as e:
            logger.debug(f"‚ùå {date_str} - Í±∞ÎûòÏùº ÌôïÏù∏ Ïã§Ìå®: {e}")
            continue

    # 15Ïùº ÎÇ¥Ïóê Ïú†Ìö®Ìïú Í±∞ÎûòÏùºÏùÑ Ï∞æÏßÄ Î™ªÌïú Í≤ΩÏö∞
    raise ValueError(
        f"üìõ ÏµúÍ∑º 15Ïùº ÎÇ¥ Ïú†Ìö®Ìïú Í±∞ÎûòÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§ (Í∏∞Ï§Ä: {start_date.strftime('%Y-%m-%d')})"
    )


def get_top_200_by_market_cap(date: datetime):
    """ÏãúÍ∞ÄÏ¥ùÏï° Í∏∞Ï§Ä Top 200 Ï¢ÖÎ™© ÏàòÏßë (KOSPI + KOSDAQ ÌÜµÌï©)"""
    date_str = date.strftime("%Y%m%d")
    logger.info(f"üì• {date_str} Í∏∞Ï§Ä ÏãúÏ¥ù Top 200 ÏàòÏßë ÏãúÏûë")

    try:
        # KOSPI ÏãúÍ∞ÄÏ¥ùÏï° ÏàòÏßë
        logger.info("üìä KOSPI ÏãúÍ∞ÄÏ¥ùÏï° ÏàòÏßë Ï§ë...")
        cap_kospi = stock.get_market_cap_by_ticker(date_str, market="KOSPI")
        if not cap_kospi.empty:
            cap_kospi["market"] = "KOSPI"
            cap_kospi = cap_kospi.reset_index()
            cap_kospi = cap_kospi.rename(columns={
                "Ìã∞Ïª§": "ticker",
                "ÏãúÍ∞ÄÏ¥ùÏï°": "market_cap"
            })
        else:
            cap_kospi = pd.DataFrame(
                columns=["ticker", "market_cap", "market"])

        # KOSDAQ ÏãúÍ∞ÄÏ¥ùÏï° ÏàòÏßë
        logger.info("üìä KOSDAQ ÏãúÍ∞ÄÏ¥ùÏï° ÏàòÏßë Ï§ë...")
        cap_kosdaq = stock.get_market_cap_by_ticker(date_str, market="KOSDAQ")
        if not cap_kosdaq.empty:
            cap_kosdaq["market"] = "KOSDAQ"
            cap_kosdaq = cap_kosdaq.reset_index()
            cap_kosdaq = cap_kosdaq.rename(columns={
                "Ìã∞Ïª§": "ticker",
                "ÏãúÍ∞ÄÏ¥ùÏï°": "market_cap"
            })
        else:
            cap_kosdaq = pd.DataFrame(
                columns=["ticker", "market_cap", "market"])

        # Îç∞Ïù¥ÌÑ∞ ÌÜµÌï©
        all_caps = pd.concat([cap_kospi, cap_kosdaq], ignore_index=True)

        if all_caps.empty:
            logger.error("‚ùå ÏãúÍ∞ÄÏ¥ùÏï° Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ïã§Ìå®")
            return []

        # ÏãúÍ∞ÄÏ¥ùÏï° Í∏∞Ï§Ä Top 200 ÏÑ†ÌÉù
        top_200 = all_caps.nlargest(200, "market_cap")

        logger.info(f"üßæ Ï¥ù Ï¢ÖÎ™© Ïàò: {len(all_caps)}, Top 200 ÏÑ†ÌÉù ÏôÑÎ£å")
        logger.info(
            f"üìà KOSPI: {len(top_200[top_200['market'] == 'KOSPI'])}Í∞ú, KOSDAQ: {len(top_200[top_200['market'] == 'KOSDAQ'])}Í∞ú"
        )

        return top_200.to_dict('records')

    except Exception as e:
        logger.error(f"‚ùå ÏãúÍ∞ÄÏ¥ùÏï° ÏàòÏßë Ïã§Ìå®: {e}")
        return []


def get_market_data(date: datetime):
    """ÏãúÍ∞ÄÏ¥ùÏï° Top 200 Ï¢ÖÎ™©Ïùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÏàòÏßë"""
    # Top 200 Ï¢ÖÎ™© ÏÑ†Ï†ï
    top_200_list = get_top_200_by_market_cap(date)

    if not top_200_list:
        logger.error("‚ùå Top 200 Ï¢ÖÎ™© ÏÑ†Ï†ï Ïã§Ìå®")
        return []

    date_str = date.strftime("%Y%m%d")
    total_tickers = len(top_200_list)

    logger.info(f"üìä Top {total_tickers}Í∞ú Ï¢ÖÎ™© ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÏàòÏßë ÏãúÏûë...")

    rows = []
    failed_count = 0

    for i, ticker_info in enumerate(top_200_list, 1):
        ticker = str(ticker_info["ticker"]).zfill(6)  # 6ÏûêÎ¶¨ Ìå®Îî©
        market = ticker_info["market"]
        market_cap = ticker_info["market_cap"]

        try:
            # ÏßÑÌñâÎ•† Ï∂úÎ†• (APIÏóêÏÑú Ï∂îÏ†ÅÌïòÎäî ÌòïÌÉú)
            logger.info(f"[{i}/{total_tickers}] {ticker} ({market}) ÏàòÏßë Ï§ë...")

            # Ï¢ÖÎ™©Î™Ö Ï°∞Ìöå
            try:
                company_name = stock.get_market_ticker_name(ticker)
            except:
                company_name = f"Ï¢ÖÎ™©{ticker}"

            # OHLCV Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
            try:
                df = stock.get_market_ohlcv(date_str, date_str, ticker)
                if df.empty:
                    logger.warning(f"‚ö†Ô∏è {ticker} OHLCV Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå")
                    failed_count += 1
                    continue

                row = df.iloc[0]
                ohlcv = {
                    "open": int(row["ÏãúÍ∞Ä"]) if row["ÏãúÍ∞Ä"] > 0 else 0,
                    "high": int(row["Í≥†Í∞Ä"]) if row["Í≥†Í∞Ä"] > 0 else 0,
                    "low": int(row["Ï†ÄÍ∞Ä"]) if row["Ï†ÄÍ∞Ä"] > 0 else 0,
                    "close": int(row["Ï¢ÖÍ∞Ä"]) if row["Ï¢ÖÍ∞Ä"] > 0 else 0,
                    "volume": int(row["Í±∞ÎûòÎüâ"]) if row["Í±∞ÎûòÎüâ"] > 0 else 0,
                }

                # Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù
                if ohlcv["close"] <= 0:
                    logger.warning(f"‚ö†Ô∏è {ticker} Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ï¢ÖÍ∞Ä")
                    failed_count += 1
                    continue

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è {ticker} OHLCV Ï°∞Ìöå Ïã§Ìå®: {e}")
                failed_count += 1
                continue

            # ÏµúÏ¢Ö Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±
            row_data = {
                "date": date.strftime("%Y-%m-%d"),
                "ticker": ticker,
                "name": company_name,
                "market": market,
                "market_cap": int(market_cap),
                "open_price": ohlcv["open"],
                "high_price": ohlcv["high"],
                "low_price": ohlcv["low"],
                "close_price": ohlcv["close"],
                "volume": ohlcv["volume"],
            }

            rows.append(row_data)

            # Ï£ºÍ∏∞Ï†Å ÏßÑÌñâ ÏÉÅÌô© Ï∂úÎ†•
            if i % 50 == 0:
                logger.info(
                    f"‚úÖ ÏßÑÌñâÎ•†: {i}/{total_tickers} ({(i/total_tickers)*100:.1f}%) - ÏÑ±Í≥µ: {len(rows)}Í∞ú, Ïã§Ìå®: {failed_count}Í∞ú"
                )

        except Exception as e:
            logger.error(f"‚ùå {ticker} Ï≤òÎ¶¨ Ïã§Ìå®: {e}")
            failed_count += 1
            continue

    logger.info(f"‚úÖ ÏàòÏßë ÏôÑÎ£å - ÏÑ±Í≥µ: {len(rows)}Í∞ú, Ïã§Ìå®: {failed_count}Í∞ú")
    return rows


def insert_data(conn, rows):
    """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ"""
    if not rows:
        logger.warning("‚ùó ÏÇΩÏûÖÌï† Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå")
        return

    try:
        with conn.cursor() as cur:
            # Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú (Ï†ÑÏ≤¥ Ï¥àÍ∏∞Ìôî)
            logger.info("üóëÔ∏è Í∏∞Ï°¥ daily_market_cap Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Ï§ë...")
            cur.execute("DELETE FROM daily_market_cap;")

            # ÏÉà Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
            logger.info(f"üìå {len(rows)}Í∞ú Ï¢ÖÎ™© Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ Ï§ë...")
            sql = """
                INSERT INTO daily_market_cap
                (date, ticker, name, market, market_cap,
                 open_price, high_price, low_price, close_price, volume)
                VALUES (%(date)s, %(ticker)s, %(name)s, %(market)s, %(market_cap)s,
                        %(open_price)s, %(high_price)s, %(low_price)s, 
                        %(close_price)s, %(volume)s)
            """
            execute_batch(cur, sql, rows, page_size=100)
            conn.commit()

        logger.info(f"‚úÖ {len(rows)}Í∞ú Ï¢ÖÎ™© Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ ÏôÑÎ£å")

        # ÏÇΩÏûÖ Í≤∞Í≥º Í≤ÄÏ¶ù
        with conn.cursor() as cur:
            cur.execute(
                "SELECT COUNT(*) FROM daily_market_cap WHERE date = %s",
                (rows[0]["date"], ))
            inserted_count = cur.fetchone()[0]
            logger.info(f"üìä Í≤ÄÏ¶ù: DBÏóê {inserted_count}Í∞ú Ï¢ÖÎ™© Ï†ÄÏû• ÌôïÏù∏")

    except Exception as e:
        logger.error(f"‚ùå Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ Ïã§Ìå®: {e}")
        conn.rollback()
        raise


# Î©îÏù∏ Ìï®ÏàòÎèÑ ÏïΩÍ∞Ñ ÏàòÏ†ï
def main():
    try:
        logger.info("üöÄ ÏãúÍ∞ÄÏ¥ùÏï° Top 200 ÏàòÏßë ÏãúÏûë")

        # ÏµúÏã† Í±∞ÎûòÏùº ÌôïÏù∏ (Ïä§ÎßàÌä∏ Î°úÏßÅ Ï†ÅÏö©)
        latest_date = get_latest_trading_day(datetime.now())
        logger.info(f"üìÖ ÏàòÏßë ÎåÄÏÉÅ ÎÇ†Ïßú: {latest_date.strftime('%Y-%m-%d')}")

        # Ï£ºÎßêÏù¥ÎÇò Ìú¥ÏùºÏù∏ Í≤ΩÏö∞ Ï∂îÍ∞Ä ÏïàÎÇ¥
        today = datetime.now().date()
        if latest_date.date() != today:
            days_diff = (today - latest_date.date()).days
            logger.info(f"üí° ÏµúÏã† Í±∞ÎûòÏùºÏùÄ {days_diff}Ïùº Ï†ÑÏûÖÎãàÎã§ (Ìú¥Ïû•Ïùº Ï†úÏô∏)")

        # Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
        rows = get_market_data(latest_date)

        if not rows:
            logger.error("‚ùå ÏàòÏßëÎêú Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå")
            sys.exit(1)

        if len(rows) < 50:
            logger.warning(f"‚ö†Ô∏è ÏàòÏßëÎêú Ï¢ÖÎ™© ÏàòÍ∞Ä Ï†ÅÏùå: {len(rows)}Í∞ú (ÏµúÏÜå 50Í∞ú Í∂åÏû•)")

        # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû•
        conn = get_db()
        insert_data(conn, rows)
        conn.close()

        logger.info(
            f"üéØ ÏãúÍ∞ÄÏ¥ùÏï° ÏàòÏßë ÏôÑÎ£å - Ï¥ù {len(rows)}Í∞ú Ï¢ÖÎ™© ({latest_date.strftime('%Y-%m-%d')} Í∏∞Ï§Ä)"
        )

    except Exception as e:
        logger.error(f"üö® Ï†ÑÏ≤¥ ÌîÑÎ°úÏÑ∏Ïä§ Ïò§Î•ò: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
